{% extends 'JdhBrandInfoBundle::layout.html.twig' %}

{% block content_header %}
    <h1>Nearest place to buy</h1>
{% endblock %}

{% block content_block %}
    <div id="toolbar" class="brand-toolbar" >
        <p><a id="return_to_main" href="{{path("_brand_main")}}">Return to main page</a></p>
    </div>
    <p>Nearest places to your position:</p>
    <div id="info"></div>
    <div">
        <div>
            <div>
                <form>
                    <div data-role="fieldcontain">
                        <label for="name">Product Input:</label>
                        <input type="text" name="name" id="queryInput" value="pizza"  />
                    </div>
                    <input type="button" id="formSubmit" value="Find" onclick="doSearch()"/>
                </form>
            </div>
        </div>
        <h2><div id="searchResults"></div></h2>
        <div id="map" style="height: 350px; border: 1px solid #979797;"></div>
        <div id="searchwell"></div>
    </div>
{% endblock %}


{% block javascripts %}
    <script type="text/javascript" src="http://maps.googleapis.com/maps/api/js?key={{ googleApisKey }}&libraries=places&sensor=false"></script>
    <script src="http://maps.google.com/maps/api/js?sensor=false"></script>
    <script src="http://www.google.com/uds/api?file=uds.js&amp;v=1.0&amp;key=ABQIAAAAjU0EJWnWPMv7oQ-jjS7dYxQ82LsCgTSsdpNEnBsExtoeJv4cdBSUkiLH6ntmAr_5O4EfjDwOa0oZBQ" type="text/javascript"></script>

    {% javascripts
    '@JdhBrandInfoBundle/Resources/public/js/*'
    %}
    <script type="text/javascript" src="{{ asset_url }}"></script>
    {% endjavascripts %}

    <script type="text/javascript">
        var gLocalSearch;
        var gMap;
        var gInfoWindow;
        var gSelectedResults = [];
        var gCurrentResults = [];

        // Create our "tiny" marker icon
        var gYellowIcon = new google.maps.MarkerImage(
                "http://labs.google.com/ridefinder/images/mm_20_yellow.png",
                new google.maps.Size(12, 20),
                new google.maps.Point(0, 0),
                new google.maps.Point(6, 20));
        var gRedIcon = new google.maps.MarkerImage(
                "http://labs.google.com/ridefinder/images/mm_20_red.png",
                new google.maps.Size(12, 20),
                new google.maps.Point(0, 0),
                new google.maps.Point(6, 20));
        var gSmallShadow = new google.maps.MarkerImage(
                "http://labs.google.com/ridefinder/images/mm_20_shadow.png",
                new google.maps.Size(22, 20),
                new google.maps.Point(0, 0),
                new google.maps.Point(6, 20));

        function initialise() {
            var latlng = new google.maps.LatLng(-25.363882,131.044922);
            var myOptions = {
                zoom: 4,
                center: latlng,
                mapTypeId: google.maps.MapTypeId.TERRAIN,
                disableDefaultUI: true
            }
            //map = new google.maps.Map(document.getElementById("map_canvas"), myOptions);
            prepareGeolocation();
            doGeolocation();
        }

        function doGeolocation() {
            if (navigator.geolocation) {
                navigator.geolocation.getCurrentPosition(positionSuccess, positionError);
            } else {
                positionError(-1);
            }
        }

        function positionError(err) {
            var msg;
            switch(err.code) {
                case err.UNKNOWN_ERROR:
                    msg = "Unable to find your location";
                    break;
                case err.PERMISSION_DENINED:
                    msg = "Permission denied in finding your location";
                    break;
                case err.POSITION_UNAVAILABLE:
                    msg = "Your location is currently unknown";
                    break;
                case err.BREAK:
                    msg = "Attempt to find location took too long";
                    break;
                default:
                    msg = "Location detection not supported in browser";
            }
            document.getElementById('info').innerHTML = msg;
        }

        function positionSuccess(position) {
            // Centre the map on the new location
            var coords = position.coords || position.coordinate || position;
            var latLng = new google.maps.LatLng(coords.latitude, coords.longitude);
            //map.setCenter(latLng);
            //map.setZoom(14);
            //var marker = new google.maps.Marker({
            //    map: map,
            //    position: latLng,
            //    title: 'Why, there you are!'
            //});
            document.getElementById('info').innerHTML = 'Looking for <b>' +
                    coords.latitude + ', ' + coords.longitude + '</b>...';

            // And reverse geocode.
            (new google.maps.Geocoder()).geocode({latLng: latLng}, function(resp) {
                var place = "You're around here somewhere!";
                if (resp[0]) {
                    var bits = [];
                    for (var i = 0, I = resp[0].address_components.length; i < I; ++i) {
                        var component = resp[0].address_components[i];
                        if (contains(component.types, 'political')) {
                            bits.push('<b>' + component.long_name + '</b>');
                        }
                    }
                    if (bits.length) {
                        place = bits.join(' > ');
                    }
                    marker.setTitle(resp[0].formatted_address);
                }
                document.getElementById('info').innerHTML = place;
            });

            // Initialize the map with default UI.
            gMap = new google.maps.Map(document.getElementById("map"), {
                center: new google.maps.LatLng(coords.latitude, coords.longitude),
                zoom: 13,
                mapTypeId: 'roadmap'
            });
            // Create one InfoWindow to open when a marker is clicked.
            gInfoWindow = new google.maps.InfoWindow;
            google.maps.event.addListener(gInfoWindow, 'closeclick', function() {
                unselectMarkers();
            });
            // Initialize the local searcher
            gLocalSearch = new GlocalSearch();
            gLocalSearch.setSearchCompleteCallback(null, OnLocalSearch);
        }

        function contains(array, item) {
            for (var i = 0, I = array.length; i < I; ++i) {
                if (array[i] == item) return true;
            }
            return false;
        }

        function unselectMarkers() {
            for (var i = 0; i < gCurrentResults.length; i++) {
                gCurrentResults[i].unselect();
            }
        }
        function doSearch() {
            var query = document.getElementById("queryInput").value;
            gLocalSearch.setCenterPoint(gMap.getCenter());
            gLocalSearch.execute(query);
        }
        // Called when Local Search results are returned, we clear the old
        // results and load the new ones.
        function OnLocalSearch() {
            if (!gLocalSearch.results) return;
            var searchWell = document.getElementById("searchwell");

            // Clear the map and the old search well
            searchWell.innerHTML = "";
            for (var i = 0; i < gCurrentResults.length; i++) {
                gCurrentResults[i].marker().setMap(null);
            }
            // Close the infowindow
            gInfoWindow.close();

            gCurrentResults = [];
            for (var i = 0; i < gLocalSearch.results.length; i++) {
                gCurrentResults.push(new LocalResult(gLocalSearch.results[i]));
            }

            //Show results
            var searchResults = document.getElementById("searchResults");
            searchResults.innerHTML = gLocalSearch.results.length + " results found";

            var attribution = gLocalSearch.getAttribution();
            if (attribution) {
                document.getElementById("searchwell").appendChild(attribution);
            }

            // Move the map to the first result
            var first = gLocalSearch.results[0];
            gMap.setCenter(new google.maps.LatLng(parseFloat(first.lat),
                    parseFloat(first.lng)));

        }
        // Cancel the form submission, executing an AJAX Search API search.
        function CaptureForm(searchForm) {
            gLocalSearch.execute(searchForm.input.value);
            return false;
        }
        // A class representing a single Local Search result returned by the
        // Google AJAX Search API.
        function LocalResult(result) {
            var me = this;
            me.result_ = result;
            me.resultNode_ = me.node();
            me.marker_ = me.marker();
            google.maps.event.addDomListener(me.resultNode_, 'mouseover', function() {
                // Highlight the marker and result icon when the result is
                // mouseovered.  Do not remove any other highlighting at this time.
                me.highlight(true);
            });
            google.maps.event.addDomListener(me.resultNode_, 'mouseout', function() {
                // Remove highlighting unless this marker is selected (the info
                // window is open).
                if (!me.selected_) me.highlight(false);
            });
            google.maps.event.addDomListener(me.resultNode_, 'click', function() {
                me.select();
            });
            document.getElementById("searchwell").appendChild(me.resultNode_);
        }
        LocalResult.prototype.node = function() {
            if (this.resultNode_) return this.resultNode_;
            return this.html();
        };

        // Returns the GMap marker for this result, creating it with the given
        // icon if it has not already been created.
        LocalResult.prototype.marker = function() {
            var me = this;
            if (me.marker_) return me.marker_;
            var marker = me.marker_ = new google.maps.Marker({
                position: new google.maps.LatLng(parseFloat(me.result_.lat),
                        parseFloat(me.result_.lng)),
                icon: gYellowIcon, shadow: gSmallShadow, map: gMap});
            google.maps.event.addListener(marker, "click", function() {
                me.select();
            });
            return marker;
        };

        // Unselect any selected markers and then highlight this result and
        // display the info window on it.
        LocalResult.prototype.select = function() {
            unselectMarkers();
            this.selected_ = true;
            this.highlight(true);
            gInfoWindow.setContent(this.html(true));
            gInfoWindow.open(gMap, this.marker());
        };

        LocalResult.prototype.isSelected = function() {
            return this.selected_;
        };

        // Remove any highlighting on this result.
        LocalResult.prototype.unselect = function() {
            this.selected_ = false;
            this.highlight(false);
        };

        // Returns the HTML we display for a result before it has been "saved"
        LocalResult.prototype.html = function() {
            var me = this;
            var container = document.createElement("div");
            container.className = "unselected";
            container.appendChild(me.result_.html.cloneNode(true));
            return container;
        }

        LocalResult.prototype.highlight = function(highlight) {
            this.marker().setOptions({icon: highlight ? gRedIcon : gYellowIcon});
            this.node().className = "unselected" + (highlight ? " red" : "");
        }

        window.onload = initialise;
    </script>

{% endblock %}